import{a2 as q,a7 as x,r as u,k as p,a8 as h}from"#entry";class N{peer=null;connections=new Map;messageHandlers=[];roomCode="";peerId="";isHost=!1;isInitialized=!1;constructor(){}async initialize(e,o,s){this.roomCode=e,this.peerId=o,this.isHost=s;try{const{default:n}=await q(async()=>{const{default:t}=await import("./BxLQoAyG.js");return{default:t}},[],import.meta.url);return this.peer=new n(o,{secure:!0,config:{iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun.services.mozilla.com"},{urls:"turn:openrelay.metered.ca:80",username:"openrelayproject",credential:"openrelayproject"}]},debug:2}),new Promise((t,d)=>{this.peer.on("open",i=>{console.log("🌐 PeerJS连接成功，ID:",i),this.isInitialized=!0,this.isHost&&this.setupHostListeners(),t()}),this.peer.on("error",i=>{console.error("🌐 PeerJS连接错误:",i),d(i)}),this.peer.on("connection",i=>{console.log("🌐 收到新的peer连接:",i.peer),this.setupConnection(i)}),this.peer.on("disconnected",()=>{console.log("🌐 PeerJS连接断开，尝试重连"),this.peer.reconnect()})})}catch(n){throw console.error("🌐 PeerJS初始化失败:",n),n}}setupHostListeners(){console.log("🌐 房主模式：等待客户端连接")}setupConnection(e){this.connections.set(e.peer,e),e.on("open",()=>{console.log("🌐 数据连接已建立:",e.peer)}),e.on("data",o=>{try{const s=typeof o=="string"?JSON.parse(o):o;console.log("🌐 收到数据:",s.type,"from:",e.peer),this.messageHandlers.forEach(n=>n(s,e.peer))}catch(s){console.error("🌐 解析消息失败:",s)}}),e.on("close",()=>{console.log("🌐 连接关闭:",e.peer),this.connections.delete(e.peer)}),e.on("error",o=>{console.error("🌐 连接错误:",o),this.connections.delete(e.peer)})}async connectToPeer(e){if(!this.isInitialized)throw new Error("PeerJS not initialized");try{console.log("🌐 连接到peer:",e);const o=this.peer.connect(e,{reliable:!0,serialization:"json"});return new Promise((s,n)=>{o.on("open",()=>{console.log("🌐 成功连接到peer:",e),this.setupConnection(o),s()}),o.on("error",t=>{console.error("🌐 连接peer失败:",t),n(t)}),setTimeout(()=>{o.open||n(new Error("连接超时"))},1e4)})}catch(o){throw console.error("🌐 连接peer异常:",o),o}}async sendMessage(e){if(!this.isInitialized)throw new Error("PeerJS not initialized");const o={...e,timestamp:Date.now(),senderId:this.peerId};JSON.stringify(o);let s=0;for(const[n,t]of this.connections.entries())if(t.open)try{t.send(o),s++,console.log("🌐 消息发送到:",n)}catch(d){console.error("🌐 发送消息失败:",n,d)}s===0?console.warn("🌐 没有可用的连接发送消息"):console.log(`🌐 消息已发送到 ${s} 个peer`)}onMessage(e){this.messageHandlers.push(e)}offMessage(e){const o=this.messageHandlers.indexOf(e);o>-1&&this.messageHandlers.splice(o,1)}getConnectedPeers(){const e=[];for(const[o,s]of this.connections.entries())s.open&&e.push(o);return e}disconnect(){console.log("🌐 断开所有PeerJS连接");for(const[e,o]of this.connections.entries())o.open&&o.close();this.connections.clear(),this.peer&&!this.peer.destroyed&&this.peer.destroy(),this.messageHandlers=[],this.isInitialized=!1,console.log("🌐 PeerJS连接已断开")}}class D{peerConnection;roomCode="";peerId="";isHost=!1;hostPeerId="";constructor(){this.peerConnection=new N}async createRoom(e,o){this.roomCode=e,this.peerId=o,this.isHost=!0,this.hostPeerId=o,console.log("🌐 创建PeerJS房间:",e),await this.peerConnection.initialize(e,o,!0),console.log("🌐 房间创建成功，等待其他玩家加入")}async joinRoom(e,o,s){this.roomCode=e,this.peerId=o,this.isHost=!1,this.hostPeerId=s,console.log("🌐 加入PeerJS房间:",e,"房主:",s),await this.peerConnection.initialize(e,o,!1),await this.peerConnection.connectToPeer(s),console.log("🌐 成功加入房间")}async sendMessage(e){await this.peerConnection.sendMessage(e)}onMessage(e){this.peerConnection.onMessage(e)}offMessage(e){this.peerConnection.offMessage(e)}getConnectedPeers(){return this.peerConnection.getConnectedPeers()}disconnect(){this.peerConnection.disconnect()}}const P=()=>new D,j=x("peerNetwork",()=>{const l=u("disconnected"),e=u(!1),o=u(""),s=u(""),n=u(null),t=u([]),d=u(0),i=u({latency:0,packetLoss:0,bandwidth:0,quality:"excellent",connectionType:"unknown"}),m=p(()=>l.value==="connecting"||l.value==="reconnecting"),w=p(()=>l.value==="connected"),S=p(()=>n.value?n.value.getConnectedPeers():[]),J=p(()=>i.value.latency),C=p(()=>i.value.quality),M=p(()=>i.value.connectionType),I=async(r,c)=>{l.value="connecting",o.value=r,e.value=c;try{console.log(`🌐 初始化PeerJS连接 - ${c?"房主":"客户端"}`),n.value=P(),n.value.onMessage((a,f)=>{console.log(`🌐 收到来自 ${f} 的消息:`,a.type),t.value.forEach(v=>v(a))}),c&&await n.value.createRoom(r,s.value),l.value="connected",g(),console.log(`🌐 PeerJS连接初始化完成 - ${c?"房主":"客户端"}`)}catch(a){throw l.value="disconnected",console.error("🌐 PeerJS连接初始化失败:",a),a}},H=async(r,c)=>{l.value="connecting",o.value=r,e.value=!1;try{console.log(`🌐 连接到PeerJS房主: ${r}, 房主ID: ${c}`),n.value=P(),n.value.onMessage((a,f)=>{console.log(`🌐 收到来自 ${f} 的消息:`,a.type),t.value.forEach(v=>v(a))}),await n.value.joinRoom(r,s.value,c),l.value="connected",g(),console.log(`🌐 已连接到PeerJS房间: ${r}`)}catch(a){throw l.value="disconnected",console.error("🌐 连接PeerJS房间失败:",a),a}},z=async r=>{if(!n.value)throw console.error("🌐 PeerJS房间未初始化"),new Error("PeerJS room not initialized");try{const c={...r,timestamp:Date.now(),sequenceId:++d.value,senderId:s.value};await n.value.sendMessage(c),console.log("🌐 PeerJS消息发送成功:",r.type)}catch(c){throw console.error("🌐 PeerJS发送消息失败:",c),c}},E=r=>{t.value.push(r)},T=r=>{const c=t.value.indexOf(r);c>-1&&t.value.splice(c,1)},k=async()=>{console.log("🌐 断开所有PeerJS连接"),n.value&&(n.value.disconnect(),n.value=null),l.value="disconnected",t.value=[],y(),console.log("🌐 PeerJS网络连接已断开")},g=()=>{console.log("🌐 开始PeerJS网络质量监控"),i.value.connectionType="internet",i.value.quality="good",i.value.latency=30},y=()=>{console.log("🌐 停止PeerJS网络质量监控")},R=()=>{console.log("🌐 开始PeerJS网络监控"),g()},$=()=>{console.log("🌐 停止PeerJS网络监控"),y()},_=r=>{s.value=r};return{status:h(l),isHost:h(e),roomCode:h(o),playerId:h(s),stats:h(i),isConnecting:m,isConnected:w,connectedPeers:S,latency:J,quality:C,connectionType:M,initializeP2PConnection:I,connectToHost:H,sendMessage:z,onMessage:E,offMessage:T,disconnect:k,startMonitoring:R,stopMonitoring:$,setPlayerId:_}});export{j as usePeerNetworkStore};
