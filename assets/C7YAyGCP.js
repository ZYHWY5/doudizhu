import{a6 as I,r as l,k as g,a7 as p}from"#entry";import"./BoMY4_lC.js";class x{ws=null;roomCode="";peerId="";messageHandlers=[];connectionState="disconnected";reconnectAttempts=0;maxReconnectAttempts=3;constructor(){}async connect(e,n){return this.roomCode=e,this.peerId=n,this.connectionState="connecting",new Promise((o,t)=>{try{const c="wss://echo.websocket.org";console.log("🌐 连接到WebRTC信令服务器:",c),this.ws=new WebSocket(c),this.ws.onopen=()=>{console.log("🌐 WebRTC信令服务器连接成功"),this.connectionState="connected",this.reconnectAttempts=0,this.sendSignalingMessage({type:"room-register",roomCode:this.roomCode,from:this.peerId,data:{action:"register"},timestamp:Date.now()}),o()},this.ws.onmessage=h=>{try{const i=JSON.parse(h.data);i.roomCode===this.roomCode&&i.from!==this.peerId&&(console.log("🌐 收到WebRTC信令:",i.type,"from:",i.from),this.messageHandlers.forEach(u=>u(i)))}catch{}},this.ws.onclose=()=>{console.log("🌐 WebRTC信令服务器连接关闭"),this.connectionState="disconnected",this.attemptReconnect()},this.ws.onerror=h=>{console.error("🌐 WebRTC信令服务器错误:",h),this.connectionState="disconnected",t(h)}}catch(c){this.connectionState="disconnected",t(c)}})}attemptReconnect(){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;const e=Math.pow(2,this.reconnectAttempts)*1e3;console.log(`🌐 ${e/1e3}秒后尝试重连 WebRTC信令 (${this.reconnectAttempts}/${this.maxReconnectAttempts})`),setTimeout(()=>{this.connect(this.roomCode,this.peerId).catch(console.error)},e)}}async sendSignalingMessage(e){if(this.ws&&this.ws.readyState===WebSocket.OPEN){const n={...e,timestamp:Date.now()};this.ws.send(JSON.stringify(n)),console.log("🌐 发送WebRTC信令:",e.type,"to:",e.to||"broadcast")}else throw console.error("🌐 WebRTC信令服务器未连接"),new Error("WebRTC signaling server not connected")}onMessage(e){this.messageHandlers.push(e)}offMessage(e){const n=this.messageHandlers.indexOf(e);n>-1&&this.messageHandlers.splice(n,1)}disconnect(){this.ws&&(this.ws.close(),this.ws=null),this.connectionState="disconnected",this.messageHandlers=[],console.log("🌐 已断开WebRTC信令服务器连接")}getConnectionState(){return this.connectionState}}class E{signalingService;peerConnections=new Map;dataChannels=new Map;messageHandlers=[];roomCode="";peerId="";isHost=!1;rtcConfig={iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun.services.mozilla.com"},{urls:"turn:openrelay.metered.ca:80",username:"openrelayproject",credential:"openrelayproject"}],iceCandidatePoolSize:10};constructor(){this.signalingService=new x}async initialize(e,n,o){this.roomCode=e,this.peerId=n,this.isHost=o;try{await this.signalingService.connect(e,n),this.signalingService.onMessage(async t=>{await this.handleSignalingMessage(t)}),console.log("🌐 WebRTC连接管理器初始化成功")}catch(t){throw console.error("🌐 WebRTC连接管理器初始化失败:",t),t}}async handleSignalingMessage(e){const{type:n,from:o,data:t}=e;switch(n){case"room-join":this.isHost&&await this.createOffer(o);break;case"offer":await this.handleOffer(o,t);break;case"answer":await this.handleAnswer(o,t);break;case"ice-candidate":await this.handleIceCandidate(o,t);break;case"player-data":this.messageHandlers.forEach(c=>c(t,o));break}}async createPeerConnection(e){const n=new RTCPeerConnection(this.rtcConfig);return n.onicecandidate=o=>{o.candidate&&this.signalingService.sendSignalingMessage({type:"ice-candidate",roomCode:this.roomCode,from:this.peerId,to:e,data:o.candidate,timestamp:Date.now()})},n.onconnectionstatechange=()=>{console.log(`🌐 与 ${e} 的连接状态:`,n.connectionState)},n.ondatachannel=o=>{const t=o.channel;this.setupDataChannel(t,e)},this.peerConnections.set(e,n),n}setupDataChannel(e,n){e.onopen=()=>{console.log(`🌐 数据通道已打开: ${n}`)},e.onmessage=o=>{try{const t=JSON.parse(o.data);this.messageHandlers.forEach(c=>c(t,n))}catch(t){console.error("🌐 解析数据通道消息失败:",t)}},e.onclose=()=>{console.log(`🌐 数据通道已关闭: ${n}`)},this.dataChannels.set(n,e)}async createOffer(e){try{const n=await this.createPeerConnection(e),o=n.createDataChannel("gameData",{ordered:!0});this.setupDataChannel(o,e);const t=await n.createOffer();await n.setLocalDescription(t),await this.signalingService.sendSignalingMessage({type:"offer",roomCode:this.roomCode,from:this.peerId,to:e,data:t,timestamp:Date.now()}),console.log(`🌐 已向 ${e} 发送offer`)}catch(n){console.error("🌐 创建offer失败:",n)}}async handleOffer(e,n){try{const o=await this.createPeerConnection(e);await o.setRemoteDescription(n);const t=await o.createAnswer();await o.setLocalDescription(t),await this.signalingService.sendSignalingMessage({type:"answer",roomCode:this.roomCode,from:this.peerId,to:e,data:t,timestamp:Date.now()}),console.log(`🌐 已向 ${e} 发送answer`)}catch(o){console.error("🌐 处理offer失败:",o)}}async handleAnswer(e,n){try{const o=this.peerConnections.get(e);o&&(await o.setRemoteDescription(n),console.log(`🌐 已设置来自 ${e} 的answer`))}catch(o){console.error("🌐 处理answer失败:",o)}}async handleIceCandidate(e,n){try{const o=this.peerConnections.get(e);o&&(await o.addIceCandidate(n),console.log(`🌐 已添加来自 ${e} 的ICE候选`))}catch(o){console.error("🌐 处理ICE候选失败:",o)}}async joinRoom(){this.isHost||(await this.signalingService.sendSignalingMessage({type:"room-join",roomCode:this.roomCode,from:this.peerId,data:{action:"join"},timestamp:Date.now()}),console.log("🌐 已发送房间加入请求"))}async sendMessage(e){const n=JSON.stringify(e);for(const[o,t]of this.dataChannels.entries())t.readyState==="open"&&(t.send(n),console.log(`🌐 通过数据通道发送消息到 ${o}`));this.dataChannels.size===0&&(await this.signalingService.sendSignalingMessage({type:"player-data",roomCode:this.roomCode,from:this.peerId,data:e,timestamp:Date.now()}),console.log("🌐 通过信令服务器发送消息"))}onMessage(e){this.messageHandlers.push(e)}offMessage(e){const n=this.messageHandlers.indexOf(e);n>-1&&this.messageHandlers.splice(n,1)}disconnect(){for(const[e,n]of this.peerConnections.entries())n.close();this.peerConnections.clear();for(const[e,n]of this.dataChannels.entries())n.close();this.dataChannels.clear(),this.signalingService.disconnect(),this.messageHandlers=[],console.log("🌐 WebRTC连接管理器已断开所有连接")}getConnectedPeers(){const e=[];for(const[n,o]of this.peerConnections.entries())o.connectionState==="connected"&&e.push(n);return e}}const f=()=>new E,j=I("realNetwork",()=>{const r=l("disconnected"),e=l(!1),n=l(""),o=l(""),t=l(null),c=l([]),h=l(0),i=l({latency:0,packetLoss:0,bandwidth:0,quality:"excellent",connectionType:"unknown"}),u=g(()=>r.value==="connecting"||r.value==="reconnecting"),y=g(()=>r.value==="connected"),v=g(()=>t.value?t.value.getConnectedPeers():[]),S=g(()=>i.value.latency),M=g(()=>i.value.quality),b=g(()=>i.value.connectionType),R=async(a,s)=>{r.value="connecting",n.value=a,e.value=s;try{console.log(`🌐 初始化P2P连接 - ${s?"房主":"客户端"}`),t.value=f(),await t.value.initialize(a,o.value,s),t.value.onMessage((d,C)=>{console.log(`🌐 收到来自 ${C} 的消息:`,d.type),c.value.forEach(A=>A(d))}),r.value="connected",m(),console.log(`🌐 P2P连接初始化完成 - ${s?"房主":"客户端"}`)}catch(d){throw r.value="disconnected",console.error("🌐 P2P连接初始化失败:",d),d}},T=async a=>{r.value="connecting",n.value=a,e.value=!1;try{console.log(`🌐 连接到房主: ${a}`),t.value=f(),await t.value.initialize(a,o.value,!1),t.value.onMessage((s,d)=>{console.log(`🌐 收到来自 ${d} 的消息:`,s.type),c.value.forEach(C=>C(s))}),await t.value.joinRoom(),r.value="connected",m(),console.log(`🌐 已连接到房间: ${a}`)}catch(s){throw r.value="disconnected",console.error("🌐 连接房间失败:",s),s}},W=async a=>{if(!t.value)throw console.error("🌐 WebRTC管理器未初始化"),new Error("WebRTC manager not initialized");try{const s={...a,timestamp:Date.now(),sequenceId:++h.value,senderId:o.value};await t.value.sendMessage(s),console.log("🌐 消息发送成功:",a.type)}catch(s){throw console.error("🌐 发送消息失败:",s),s}},H=a=>{c.value.push(a)},D=a=>{const s=c.value.indexOf(a);s>-1&&c.value.splice(s,1)},$=async()=>{console.log("🌐 断开所有网络连接"),t.value&&(t.value.disconnect(),t.value=null),r.value="disconnected",c.value=[],w(),console.log("🌐 网络连接已断开")},m=()=>{console.log("🌐 开始网络质量监控"),i.value.connectionType="internet",i.value.quality="good",i.value.latency=50},w=()=>{console.log("🌐 停止网络质量监控")},k=()=>{console.log("🌐 开始网络监控"),m()},O=()=>{console.log("🌐 停止网络监控"),w()},P=a=>{o.value=a};return{status:p(r),isHost:p(e),roomCode:p(n),playerId:p(o),stats:p(i),isConnecting:u,isConnected:y,connectedPeers:v,latency:S,quality:M,connectionType:b,initializeP2PConnection:R,connectToHost:T,sendMessage:W,onMessage:H,offMessage:D,disconnect:$,startMonitoring:k,stopMonitoring:O,setPlayerId:P}});export{j as useRealNetworkStore};
